@@ -55,21 +58,29 @@ collection of docker containers are created, started, stopped and interact with
 each other.  A unit is denoted by the tuple ``UNITNAME/COMMAND`` referring to
 its unique *unit name* and a *command*.  Each *command* is either defined by a
 configuration file, or exist magically:
-If the *command* ``start`` exists, that should describe how to start up the
-unit, the commands
-
-- ``stop`` (stops all the containers in the unit)
-- ``cleanup`` (removes all containers, that do not have a volume attached) and
-- ``purge`` (removes all containers, deletes volumes and removes base images).
-
-are generated automatically, but can be overwritten with explicit command files.
+Usually, the *command* ``start`` describe how to start up the unit. If it
+exists, the following commands are generated automatically:
+  - ``build`` builds or pulls all required images,
+  - ``create`` creates all containers without starting them,

+  - ``backup`` backups all volumes attached to the containers in a unit,
+  - ``restore`` restores all volumes attached to the containers in a unit,
+  - ``test`` runs a test of the specified variants ``<variants>``
+    (cf. :ref:`unittests` for more information)
+    and
+  - ``restart`` restarts all containers
+
+Each of these automatically generated containers (except for the
+``test<variants>`` scripts can be overwritten by providing explicit
+configuration files.
 
 To list all available units, the command
 
 .. code:: bash
 
    docker_start list --units
-
 returns a list of all available ``UNITNAME/COMMAND`` tuples.
 
 In order to print out the (potentially automatically created) configuration
@@ -114,13 +125,21 @@ Alternatively, the first document can simply be of the form:
 in which case the container descriptions are read from the file
 ``other_file.yaml``.
 
-List of commands
-****************
+Links
++++++
+
+TODO: There needs to be a special handling of links and how to name them.  We
+want to have a fall-back extra_hosts entry in case, the link to a container is
+not available.  In that case, some service should be queried in order to find
+out if the container is published on a different instance.
+
+List of orders
+**************
 
-The second document describes a list of commands to execute on the previously
+The second document describes a list of orders to execute on the previously
 defined containers.  The document is a list of dictionaries with only one key
 (the container name to execute a command on).  The value of this dictionary is
-another dictionary specifying a :ref:`command <commands>` and its arguments.
+another dictionary specifying a :ref:`list of orders <orders>` and its arguments.
 
 Example
 ```````
@@ -153,12 +172,12 @@ An example configuration file looks like this:
      gitolite:
        command: start
 
-.. _commands:
+.. _orders:
 
-Commands
-````````
+Orders
+``````
 
-The following commands can be specified in the list of commands:
+The following ``commands`` can be specified in the list of orders:
 
 build
   builds a new image. This calls `build()` from docker-py_ with the options
@@ -227,8 +246,18 @@ remove_image
   removes the image associated with the container.
 
 execute
-  executes a command either on the file system of the host container or in the
-  special container named ``host`` that is only valid for this command.
+  executes a command either
+    1. on the file system of the container,
+    2. in a temporary container created from the base image,
+    3. inside a running container or even on
+    4. the host system.
+
+  For the latter choice, simply run the command in a *virtual container* called
+  ``host``.  If an existing container is specified, by default, the command is
+  executed on the file system of the container.  If you want to execute the
+  command in a temporary container or in a running container, specify the
+  ``type`` argument.  If no running container is found, and ``type`` is
+  specified as ``in_running``, then ``temporary`` is used as a fall-back.
 
   **Arguments**:
     run
@@ -237,7 +266,26 @@ execute
       whether to execute it in a shell
     binds
       a dictionary of volume binds for the host system
-
+    type
+      the execution type (one of ``file_system``, ``temporary``,
+      ``in_running``)
+tag
+  tags an image with an additional tag
+commit
+  makes an updated image commit from a container
+push
+  pushes an image to a remote repository
+
+
+Variants
+++++++++
+
+There is one argument that is valid of all commands in the list of orders,
+called ``variants``.  This should get a list of strings.  If there are variants
+specified in a configuration file, then the ``unit/command`` can be filtered in
+the following way ``unit/command:variant1:variant2:...:variantn``.  This
+selects only the orders tagged with the specified variant strings.  You could
+use this, to define a minimal set of development servers for example.
 
 .. _environments:
 
@@ -251,6 +299,32 @@ file, for example.  Some environment variables are added automatically, most
 importantly the variable ``{{DOCKERSTRA_CONF}}`` pointing to the base directory
 of the configuration file structure.
 
+Environment parametrization
+***************************
+
+As a special option, the ``start.yaml`` file can have a third document.  This
+document defines a parametrization of the environment, that can be controlled
+via the command line of the docker_start.py command.
+
+The third document is simply a list of argparse.add_argument invocations:
+
+.. code::yaml::
+
+ - add_argument:
+     name: '--language'
+     short: '-l'
+     choices: ['python', 'node']
+     default: 'python'
+     help: 'language of the host container'
+ - add_argument:
+     name: 'command'
+     choices: ['initialize', 'exec', 'host-exec', 'bash', 'daemon', 'single', 'upgrade']
+     default: 'initialize'
+     help: 'define what to do with the container'
+ - add_argument:
+     name: 'args'
+     nargs: argparse.REMAINDER
+
 .. _services:
 
 Service and data images
@@ -264,7 +338,139 @@ between ``data`` and ``service`` directories, but data images in general only
 contain volumes that can be mounted in a container derived from a service
 image.
 
+
+Updates
+*******
+
+If the unit directory has a command ``unit/update``, it should execute a script
+to create a temporary container.  As the last order in this list, you can
+specify a command called ``tests`` on the virtual container ``host``, with an
+argument list called ``tests`` as well.  This list comprises command line
+arguments for test runs, that will be executed in this step.  This way, the
+``unit/update`` command is only considered successful if all the tests work
+after updating the image.  This way, you can make sure, that the tag ``latest``
+is only applied if the update worked.
+
+For every ``unit/update`` command, |project| automatically generates a
+``unit/upgrade`` command, that re-creates and re-starts all running containers
+that depend on the updated image.
+
+.. seealso:: :ref:`variants`
+
+.. _unittests:
+
+Unit tests
+``````````
+
+For each unit, tests are automatically generated from the meta information
+provided in the configuration files.  The commands for test-cases have the form
+``test:variant1:variant2:...:variantn`` If no meta-data are provided, the
+following variants are available:
+
+default
+  runs unit/start and unit/stop and makes each order a test case.
+full
+  runs unit/start, unit/stop and unit/purge, and makes each order a test case.
+
+.. note::
+
+ The created containers (and images in case of the full variant) have
+ pseudonames, such that hey do not interfere with production containers, unless
+ the option ``--production`` is specified in which case the tests are executed
+ with the production containers and images.
+
+With meta-information, further variants can be specified.  Every unit should be
+configured to provide a test variant called
+
+check
+  checking the successful start of daemons or jobs in containers.
+
+The ``test:check`` command can be made available by providing fields ``daemon``
+or ``job`` to the composition document.  An example ``daemon`` field
+
+.. code:: yaml
+
+  cgit:
+    daemon:
+      - GET:
+           url: https://cgit.main:443
+           status: 200
+           re.match: "My personal git repositories"
+           cert: ${DOCKERCONF}/cgit.main.pem
+      - GET:
+           url: http://{{.Network.IPAddress}}(cgit):80
+           status: 200
+           re.match: "My personal git repsoitories"
+  e2e-check:
+    start:
+      links:
+        - ["cgit.main", "nginx_server"]
+
+tests that HTML requests to the two domains https://cgit.main:443 and
+http://{{.Network.IPAddress}}(cgit):80  succeed.  Note, that the checks are run
+from the special container e2e-check, that might need to add links to running
+containers.
+
+An example ``job`` field looks like the following:
+
+.. code:: yaml
+
+   backup:
+     job:
+       exit_code: 0
+       logs:
+         - re.match: "Success"
+
+Furthermore, you can define your own test variants by adding them to your composition document:
+
+.. code:: yaml
+
+  python_programme:
+    tests:
+      pytests:
+        execute: make test
+        overwrites:
+          volumes_from: python3_virtualenv
+        extra:
+          binds:
+            /uploads:
+              bind: /uploads
+              ro: False
+        files: ["coverage_html/", "junit-*.xml"]
+        capture_logs: True
+
+This defines a variant ``pytests`` that executes ``make test`` (either in a
+container that is especially created for this job, or in an exec_job, if the
+container is already running).  The specified files, that are created, are
+copied into a data container called ``test_data`` with the directory structure:
+``/archives/variant/container/TIMESTAMP/`` and ``/tests/variant/container/``
+linking to the latest TIMESTAMP.
+
+.. note::
+
+  This can be combined with environment parsing to generate powerful test
+  combinations.  In this case, the variant name should not be allowed to be
+  parametrized, or alternatively change the environment???
+
+.. note::
+
+  The ``test_data`` container should also save the configured environment to
+  have all the necessary data to reproduce the results.
+
+.. note::
+
+  If a test variant is configured for a container that is not started in the
+  unit/start order of commands, it will be started during the test run, and
+  removed after it is not needed anymore.
+
 .. _YAML: http://yaml.org
 .. _docker-py: http://docker-py.readthedocs.org
 
+Extra scripts
+-------------
+
+TODO There is a script available, that updates nginx configuration files based on
+the available hosts.  Maybe this should be a separate container, that I simply
+restart...  I think that is a better idea.
+
 .. vim:set et sw=2 ts=8 spell spelllang=en:
